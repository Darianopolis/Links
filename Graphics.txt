--------------------------------------------------------------------------------
--                                 Graphics
--------------------------------------------------------------------------------

Vulkan
    **** TL;DR - Getting Started ****
        1) VK Tutorial: https://vulkan-tutorial.com/
        2) Sync blog post: http://themaister.net/blog/2019/08/14/yet-another-blog-explaining-vulkan-synchronization/
        3) VK Lecture Series: https://www.youtube.com/watch?v=tLwbj9qys18&list=PLmIqTlJ6KsE1Jx5HV4sd2jOe3V1KMHHgn
        4) VK Guide: https://vkguide.dev/
        5) Docs: https://registry.khronos.org/vulkan/specs/1.3-extensions/html/index.html

    Docs:
        https://docs.vulkan.org/spec/latest/index.html

    GLSL Extension specs:
        https://github.com/KhronosGroup/GLSL/tree/master/extensions

    Tutorials
        https://vulkan-tutorial.com/
        https://vkguide.dev/
        https://www.intel.com/content/www/us/en/developer/articles/training/api-without-secrets-introduction-to-vulkan-preface.html
        VK Game Engine Series: https://www.youtube.com/playlist?list=PL8327DO66nu9qYVKLDmdLW_84-yE4auCR
        VK Lecture Series: https://www.youtube.com/watch?v=tLwbj9qys18&list=PLmIqTlJ6KsE1Jx5HV4sd2jOe3V1KMHHgn

    Dynamic rendering: https://lesleylai.info/en/vk-khr-dynamic-rendering/
    Ray Tracing:       https://nvpro-samples.github.io/vk_raytracing_tutorial_KHR/#introduction
    Descriptor Indexing & Bindless:
        https://henriquegois.dev/posts/bindless-resources-in-vulkan/
        https://blog.traverseresearch.nl/bindless-rendering-setup-afeb678d77fc
        https://chunkstories.xyz/blog/a-note-on-descriptor-indexing/
    Descriptor buffer: https://www.khronos.org/blog/vk-ext-descriptor-buffer
    Synchronization:   http://themaister.net/blog/2019/08/14/yet-another-blog-explaining-vulkan-synchronization/
    ImGui:             https://frguthmann.github.io/posts/vulkan_imgui/
    Shader Objects:    https://www.khronos.org/blog/you-can-use-vulkan-without-pipelines-today
    GPU Decompression: https://github.com/nvpro-samples/vk_memory_decompression

    Examples:
        Khronos:        https://github.com/KhronosGroup/Vulkan-Samples
        Sascha Willems: https://github.com/SaschaWillems/Vulkan

    Useful Extension:
        Core in Vulkan 1.2:
            VK_EXT_descriptor_indexing
            VK_KHR_buffer_device_address
            VK_KHR_maintenance1
            VK_KHR_maintenance2
            VK_KHR_maintenance3
            VK_KHR_timeline_semaphore
        Core in Vulkan 1.3:
            VK_KHR_dynamic_rendering
            VK_EXT_extended_dynamic_state
            VK_EXT_extended_dynamic_state2
            VK_KHR_maintenance4
            VK_KHR_synchronization2
        Widely supported (on desktop):
            VK_KHR_push_descriptor
            VK_EXT_graphics_pipeline_library
            GL_EXT_shader_image_load_formatted
        Extra stuff (newer / reduced support or debuggability):
            VK_KHR_maintenance5
            VK_EXT_host_image_copy
            VK_NV_memory_decompression (available via extension layer)
            VK_EXT_shader_tile_image
            VK_KHR_descriptor_buffer
            VK_EXT_mutable_descriptor_type
            VK_EXT_extended_dynamic_state3
            VK_EXT_shader_object
        Ray tracing:
            VK_KHR_ray_tracing_pipeline
            VK_KHR_acceleration_structure
            VK_KHR_ray_tracing_maintenance
            VK_KHR_ray_query
            VK_KHR_ray_tracing_position_fetch
            VK_NV_ray_tracing_invocation_reorder
        Mesh Shading:
            VK_EXT_mesh_shader
            VK_KHR_fragment_shader_barycentrics (also applicable to normal rasterization)


WebGPU:
    https://eliemichel.github.io/LearnWebGPU/

RenderDoc:
    https://renderdoc.org/docs/getting_started/quick_start.html
    Suported Vulkan Extensions:
        https://github.com/baldurk/renderdoc/blob/v1.x/renderdoc/driver/vulkan/extension_support.md

Texture Compression:
    KTX: https://www.khronos.org/ktx/
    https://gpuopen.com/compressonator/
    DDS File Format (supports BCn):
        https://en.wikipedia.org/wiki/DirectDraw_Surface

    BCn:
        https://www.reedbeta.com/blog/understanding-bcn-texture-compression-formats/
        https://richg42.blogspot.com/2018/04/a-tale-of-multiple-bc7-encoders.html
        GPU Texture Compression talk: https://youtu.be/3H-HGlsC0NY?si=yWsu8jETK_1Wg3z2
        RDO reduced entropy BC7 encoder: https://github.com/richgel999/bc7enc_rdo

Assimp:
    Materials:
        https://assimp-docs.readthedocs.io/en/v5.1.0/API/API-Documentation.html?highlight=aiMaterial#_CPPv410aiMaterial
        https://assimp.sourceforge.net/lib_html/materials.html

glTF:
    https://github.com/jkuhlmann/cgltf

Task Graphs:
    https://levelup.gitconnected.com/organizing-gpu-work-with-directed-acyclic-graphs-f3fd5f2c2af3
    http://simonstechblog.blogspot.com/2019/07/render-graph.html
    http://themaister.net/blog/2017/08/15/render-graphs-and-vulkan-a-deep-dive/
    https://www.jeremyong.com/rendering/2019/06/28/render-graph-optimization-scribbles/
    https://gist.github.com/rtryan98/c781e27d017e5ac45c76e884416b65fe#render-graphs

Culling:
    Optimized AABB and OBB frustum culling:
        https://www.cse.chalmers.se/~uffe/vfc_bbox.pdf

DirectX 12
    Tutorials
        https://www.3dgep.com/learning-directx-12-1/
    Bindless
        https://blog.traverseresearch.nl/bindless-rendering-setup-afeb678d77fc

Decals, glyphs and outlines
    GPU-Centered Font Rendering Directly from Glyph Outlines:
        http://terathon.com/i3d2018_lengyel.pdf
    Text rendering with vector textures:
        https://wdobbie.com/post/gpu-text-rendering-with-vector-textures/
    Valve SDF for decals:
        https://steamcdn-a.akamaihd.net/apps/valve/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf
    Outlines:
        https://alexanderameye.github.io/notes/rendering-outlines/
        https://omar-shehata.medium.com/how-to-render-outlines-in-webgl-8253c14724f9
        Jump Flood: https://bgolus.medium.com/the-quest-for-very-wide-outlines-ba82ed442cd9

    The Best Darn Grid Shader (Yet):
        https://bgolus.medium.com/the-best-darn-grid-shader-yet-727f9278b9d8

Foliage:
    Grass:
        How do Major Video Games Render Grass (Simon dev Youtube):
            https://www.youtube.com/watch?v=bp7REZBV4P4
        Billboard Grass (Acerola Youtube):
            https://www.youtube.com/watch?v=Y0Ko0kvwfgA
        Modern Foliage Rendering (Acerola Youtube):
            https://www.youtube.com/watch?v=jw00MbIJcrk

Projections:
   https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/orthographic-projection-matrix.html

Rasterization:
    Triangle Filling:
        http://www.sunshine2k.de/coding/java/TriangleRasterization/TriangleRasterization.html
        https://learn.microsoft.com/en-us/windows/win32/direct3d11/d3d10-graphics-programming-guide-rasterizer-stage-rules
        https://learn.microsoft.com/en-us/windows/win32/direct3d12/conservative-rasterization

    Graphics from scratch: https://gabrielgambetta.com/computer-graphics-from-scratch/
    Perspective: https://www.youtube.com/watch?v=U0_ONQQ5ZNM
    Depth:
        https://nlguillemot.wordpress.com/2016/12/07/reversed-z-in-opengl/
        https://developer.nvidia.com/content/depth-precision-visualized
        https://stackoverflow.com/questions/13711252/what-does-gl-fragcoord-z-gl-fragcoord-w-represent

    Ambient Occlusion:
        SSAO in Vulkan: https://developer.imaginationtech.com/blog/ambient-occlusion-in-vulkan/
    Light + Material shading techniques:
        Forward+:          https://takahiroharada.files.wordpress.com/2015/04/forward_plus.pdf
        Clustered Shading: http://www.aortiz.me/2018/12/21/CG.html
    Advances in Real-Time Rendering in Games:
        http://advances.realtimerendering.com/s2016/

Linear Algebra:
    Quaternions on the GPU: https://tech.metail.com/performance-quaternions-gpu/

Camera
    https://catlikecoding.com/unity/tutorials/movement/orbit-camera/

PBR:
    LeanOpenGL PBR Theory:
     - https://learnopengl.com/PBR/Theory
     - And Devsh's comment on errata in it: https://docs.google.com/document/d/1ZLT1-fIek2JkErN9ZPByeac02nWipMbO89oCW2jxzXo/edit

    https://google.github.io/filament/Filament.md.html#materialsystem/standardmodel

    The book: https://pbr-book.org/

    OpenPBR:
        https://github.com/AcademySoftwareFoundation/OpenPBR
        https://academysoftwarefoundation.github.io/OpenPBR/

    http://filmicworlds.com/blog/everything-has-fresnel/

Blending
    RT OIT:
        https://interplayoflight.wordpress.com/2023/07/15/raytraced-order-independent-transparency/
        https://interplayoflight.wordpress.com/2023/07/30/raytraced-order-independent-transparency-part-2/

Double Floats
    https://csclub.uwaterloo.ca/~pbarfuss/dekker1971.pdf
    In UE5:
        https://github.com/EpicGames/UnrealEngine/commit/5a1fd9cc91f179b9aa245634fa7d0d4f08b2dfca
    Creel: Double it Like Dekker: A Remarkable Technique to Double Floating Point Precision (Part 1)
        https://www.youtube.com/watch?v=6OuqnaHHUG8#

Tonemapping:
    https://github.com/dmnsgn/glsl-tone-map
    https://github.com/MrLixm/AgXc/blob/main/reshade/reshade-shaders/Shaders/AgX.fx

Color spaces & Gamma Correction:
    https://blog.johnnovak.net/2016/09/21/what-every-coder-should-know-about-gamma/
    What is Gamma Correction?: https://www.youtube.com/watch?v=wFx0d9c8WMs

Ray Tracing
    Basic Path Tracer:
        http://three-eyed-games.com/blog/

    RT Gems v1.9 (unofficial):
        https://www.realtimerendering.com/raytracinggems/rtg/index.html
        https://www.realtimerendering.com/raytracinggems/unofficial_RayTracingGems_v1.9.pdf

    A Fast and Robust Method for Avoiding Self-Intersection
        https://link.springer.com/chapter/10.1007/978-1-4842-4427-2_6

    Robust solution for avoiding impossible outgoing ray directions with interpolated/mapped normals:
        https://blog.unity.com/technology/microfacet-based-normal-mapping-for-robust-monte-carlo-path-tracing

    Phong shaded RT in Unity:
        https://www.cs.princeton.edu/courses/archive/fall16/cos526/papers/importance.pdf
        http://blog.three-eyed-games.com/2018/05/12/gpu-path-tracing-in-unity-part-2/

    Sampling:
        https://cas.ee.ic.ac.uk/people/dt10/research/rngs-gpu-mwc64x.html
        http://l2program.co.uk/900/concentric-disk-sampling
        https://jcgt.org/published/0007/04/01/paper.pdf

    Ray Cones:
        https://d1qx31qr3h6wln.cloudfront.net/publications/Akenine-Moller2021LOD.pdf
        https://www.jcgt.org/published/0010/01/01/paper-lowres.pdf

    PBRT:
        https://www.pbrt.org/
        https://pbr-book.org/

    Intersection tests:
        https://www.realtimerendering.com/intersections.html

    RT Gems:         https://link.springer.com/content/pdf/10.1007%2F978-1-4842-7185-8.pdf
    ReSTIR paper:    https://research.nvidia.com/sites/default/files/pubs/2020-07_Spatiotemporal-reservoir-resampling/ReSTIR.pdf
    ReSTIR GI paper: https://research.nvidia.com/publication/2021-06_restir-gi-path-resampling-real-time-path-tracing
    ReSTIR article:  https://gamehacker1999.github.io/posts/restir/

    Manual BVHs:     https://jacco.ompf2.com/2022/04/13/how-to-build-a-bvh-part-1-basics/
    SBTs explained:  https://www.willusher.io/graphics/2019/11/20/the-sbt-three-ways

    Denoising:
        https://alain.xyz/blog/ray-tracing-denoising#accumulation

    RT shadows:
        Analytical: https://blog.imaginationtech.com/implementing-fast-ray-traced-soft-shadows-in-a-game-engine/
        Monte Carlo: https://medium.com/@alexander.wester/ray-tracing-soft-shadows-in-real-time-a53b836d123b
        https://link.springer.com/content/pdf/10.1007%2F978-1-4842-4427-2_13.pdf
        https://developer.download.nvidia.com/assets/events/GDC15/hybrid_ray_traced_GDC_2015.pdf

    Disney BRDF
        https://github.com/knightcrawler25/GLSL-PathTracer/blob/master/src/shaders/common/disney.glsl
        https://github.com/schuttejoe/Selas/blob/dev/Source/Core/Shading/Disney.cpp
        https://github.com/knightcrawler25/Optix-PathTracer/blob/master/src/optixPathTracer/disney.cu
        https://www.shadertoy.com/view/XdyyDd
        https://www.shadertoy.com/view/llGyRd
        https://www.shadertoy.com/view/sltXRl

Vizbuffer rendering:
    http://filmicworlds.com/blog/visibility-buffer-rendering-with-material-graphs/
    Computing Barycentrics:
        https://github.com/Tearnote/Minote/blob/4bde23edf09af5d08a3f3536cd717a20e272b8e4/src/glsl/visibility/visbuf.glsl#L9
    Analytical Derivatives:
        https://github.com/JuanDiegoMontoya/Frogfood/blob/main/data/shaders/visbuffer/VisbufferResolve.frag.glsl#L43-L79

Text rendering:
    https://forenoonwatch.github.io/text_editing.html
    https://github.com/freetype/freetype
    https://github.com/harfbuzz/harfbuzz

Vertex packing
    Old encodings:    https://aras-p.info/texts/CompactNormalStorage.html
    Normal encoding:  https://knarkowicz.wordpress.com/2014/04/16/octahedron-normal-vector-encoding/
    Improved normals: https://johnwhite3d.blogspot.com/2017/10/signed-octahedron-normal-encoding.html?view=classic
    Tangent space:    https://www.jeremyong.com/graphics/2023/01/09/tangent-spaces-and-diamond-encoding/

    https://wickedengine.net/2023/11/16/dynamic-vertex-formats/

    Normals Compression - Octahedron
        https://www.shadertoy.com/view/Mtfyzl
    Normals Compression Comparison
        https://www.shadertoy.com/view/4llcRl
    Normals Compression
        https://www.shadertoy.com/view/llfcRl

Hardware
    NVIDIA
        Turing
            https://old.hotchips.org/hc31/HC31_2.12_NVIDIA_final.pdf
            https://arxiv.org/pdf/1903.07486.pdf

Light Sampling
    https://schuttejoe.github.io/post/arealightsampling/

Skinning
    https://animcoding.com/post/animation-tech-intro-part-1-skinning
    https://ogldev.org/www/tutorial38/tutorial38.html

Volumetric scattering
    Cloud example: https://www.shadertoy.com/view/3sffzj

SVGF denoising
    https://jo.dreggn.org/home/2010_atrous.pdf
    https://bartwronski.com/2019/09/22/local-linear-models-guided-filter/

Infinite grids
    http://asliceofrendering.com/scene%20helper/2020/01/05/InfiniteGrid/
    https://iquilezles.org/articles/filterableprocedurals/

Icospheres
    https://observablehq.com/@mourner/uv-mapping-an-icosphere
    https://mft-dev.dk/uv-mapping-sphere/
    https://www.alexisgiard.com/icosahedron-sphere/
    https://schneide.blog/2016/07/15/generating-an-icosphere-in-c/
    https://procworlds.wordpress.com/

Meshing
    https://www.reddit.com/r/VoxelGameDev/comments/cwtqtu/greedy_meshing_algorithm_implementation/
    https://0fps.net/2012/06/30/meshing-in-a-minecraft-game/
    https://gist.github.com/Vercidium/a3002bd083cce2bc854c9ff8f0118d33
    https://vercidium.com/blog/voxel-world-optimisations/

ReSTIR
    http://benedikt-bitterli.me/Data/dissertation.pdf
    https://research.nvidia.com/sites/default/files/pubs/2020-07_Spatiotemporal-reservoir-resampling/ReSTIR.pdf
    http://lousodrome.net/blog/light/2022/05/14/reading-list-on-restir/
    https://intro-to-restir.cwyman.org/

Signed-distance functions
    3D SDFs: https://iquilezles.org/articles/distfunctions/
    2D SDFs: https://iquilezles.org/articles/distfunctions2d/

Model resources:
    Rungholt and other models: https://casual-effects.com/g3d/data10/index.html

Mesh Tools:
    MeshLab: https://www.meshlab.net/

Post Processing:
    Film Grain: https://lettier.github.io/3d-game-shaders-for-beginners/film-grain.html

Game/Engine teardowns:
    Teardown:
        https://juandiegomontoya.github.io/teardown_breakdown.html

Profiling:
    Tracy:
        https://luxeengine.com/integrating-tracy-profiler-in-cpp/